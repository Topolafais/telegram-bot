import telebot
import os

TOKEN = os.environ.get("TOKEN")
bot = telebot.TeleBot(TOKEN)

BAN_FILE = "ban_reasons.txt"
WARN_FILE = "warns.txt"

ROONYA = 599492177
DARLIN = 1603464587
ADMIN_LIST = [ROONYA, DARLIN, 5771401595]

def is_admin(message):
    return message.from_user.id in ADMIN_LIST

def is_owner(user_id):
    return user_id in [ROONYA, DARLIN]

@bot.message_handler(commands=['addadmin'])
def add_admin(message):
    if not is_owner(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /addadmin <id>")
        return

    new_admin_id = int(parts[1])
    if new_admin_id in ADMIN_LIST:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")
    else:
        ADMIN_LIST.append(new_admin_id)
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω: {new_admin_id}")

@bot.message_handler(commands=['deladmin'])
def del_admin(message):
    if not is_owner(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /deladmin <id>")
        return

    del_id = int(parts[1])
    if del_id in [ROONYA, DARLIN]:
        bot.send_message(message.chat.id, "üö´ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.")
        return

    if del_id in ADMIN_LIST:
        ADMIN_LIST.remove(del_id)
        bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω {del_id} —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")

# /start
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–æ—Ç –ª–æ–≥–æ–≤–∞ –∫—Ä–æ–ª–∏–∫–∞.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é\n"
        "‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º\n\n"
        "üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /commandlist"
    )

@bot.message_handler(commands=['adminlist'])
def admin_list(message):
    admins_text = "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n"
    for admin_id in ADMIN_LIST:
        admins_text += f"- {admin_id}\n"
    bot.send_message(message.chat.id, admins_text)

# /commandlist
@bot.message_handler(commands=['commandlist'])
def command_list(message):
    bot.send_message(message.chat.id,
        "üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π ID\n"
        "/banReason ‚Äî —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
        "/saveBanReason ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/deleteBanReason ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞\n"
        "/banlist ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–Ω–æ–≤\n"
        "/addWarn <ID> <–ø—Ä–∏—á–∏–Ω–∞> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
        "/getWarns <ID> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
        "/deleteWarn <ID> ‚Äî —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
        "/clearWarns <ID> ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
        "/listWarns ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
        "/addadmin ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
        "/deladmin ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"
    )

# /id
@bot.message_handler(commands=['id'])
def get_id(message):
    bot.send_message(message.chat.id, f"üÜî –¢–≤–æ–π ID: {message.from_user.id}")

# /saveBanReason
@bot.message_handler(commands=['saveBanReason'])
def save_ban_reason(message):
    if not is_admin(message):
        bot.send_message(message.chat.id, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏ ID –∏ –ø—Ä–∏—á–∏–Ω—É (–ø—Ä–∏–º–µ—Ä: 1234567890 —Å–ø–∞–º):")
    bot.register_next_step_handler(message, write_ban_reason)

def write_ban_reason(message):
    try:
        parts = message.text.strip().split(maxsplit=1)
        if len(parts) != 2:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1234567890 —Å–ø–∞–º")
            return
        with open(BAN_FILE, "a", encoding="utf-8") as f:
            f.write(f"{parts[0]} - {parts[1]}\n")
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# /banReason
@bot.message_handler(commands=['banReason'])
def get_ban_reason(message):
    bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(message, find_ban_reason)

def find_ban_reason(message):
    user_id = message.text.strip()
    try:
        with open(BAN_FILE, "r", encoding="utf-8") as f:
            matches = [line.strip() for line in f if line.startswith(f"{user_id} ")]
        if matches:
            bot.send_message(message.chat.id, f"üìÑ –ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join(matches))
        else:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# /deleteBanReason
@bot.message_handler(commands=['deleteBanReason'])
def delete_ban_reason(message):
    bot.send_message(message.chat.id, "üóë –í–≤–µ–¥–∏ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –±–∞–Ω–∞:")
    bot.register_next_step_handler(message, remove_ban_reason)

def remove_ban_reason(message):
    user_id = message.text.strip()
    try:
        with open(BAN_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
        new_lines = [line for line in lines if not line.startswith(f"{user_id} ")]
        if len(new_lines) == len(lines):
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        with open(BAN_FILE, "w", encoding="utf-8") as f:
            f.writelines(new_lines)
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –¥–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# /banlist
@bot.message_handler(commands=['banlist'])
def list_bans(message):
    try:
        with open(BAN_FILE, "r", encoding="utf-8") as f:
            text = f.read()
        if not text:
            bot.send_message(message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ –ø—É—Å—Ç.")
            return
        for i in range(0, len(text), 4096):
            bot.send_message(message.chat.id, text[i:i+4096])
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# /addWarn
@bot.message_handler(commands=['addWarn'])
def add_warn(message):
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /addWarn <ID> <–ø—Ä–∏—á–∏–Ω–∞>")
            return
        user_id, reason = parts[1], parts[2]
        with open(WARN_FILE, "a+", encoding="utf-8") as f:
            f.seek(0)
            warns = [line for line in f if line.startswith(f"{user_id} -")]
            if len(warns) >= 3:
                bot.send_message(message.chat.id, f"üö´ –£ {user_id} —É–∂–µ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
                return
            f.write(f"{user_id} - {reason}\n")
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# /getWarns
@bot.message_handler(commands=['getWarns'])
def get_warns(message):
    parts = message.text.split()
    if len(parts) != 2:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /getWarns <ID>")
        return
    user_id = parts[1]
    try:
        with open(WARN_FILE, "r", encoding="utf-8") as f:
            warns = [line.strip() for line in f if line.startswith(f"{user_id} -")]
        if warns:
            bot.send_message(message.chat.id, f"üìã –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n" + "\n".join(warns))
        else:
            bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# /deleteWarn
@bot.message_handler(commands=['deleteWarn'])
def delete_warn(message):
    parts = message.text.split()
    if len(parts) != 2:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /deleteWarn <ID>")
        return
    user_id = parts[1]
    try:
        with open(WARN_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
        removed = False
        new_lines = []
        for line in reversed(lines):
            if not removed and line.startswith(f"{user_id} -"):
                removed = True
                continue
            new_lines.insert(0, line)
        if removed:
            with open(WARN_FILE, "w", encoding="utf-8") as f:
                f.writelines(new_lines)
            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# /clearWarns
@bot.message_handler(commands=['clearWarns'])
def clear_warns(message):
    parts = message.text.split()
    if len(parts) != 2:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /clearWarns <ID>")
        return
    user_id = parts[1]
    try:
        with open(WARN_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
        new_lines = [line for line in lines if not line.startswith(f"{user_id} -")]
        with open(WARN_FILE, "w", encoding="utf-8") as f:
            f.writelines(new_lines)
        bot.send_message(message.chat.id, f"‚úÖ –í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# /listWarns
@bot.message_handler(commands=['listWarns'])
def list_warns(message):
    try:
        with open(WARN_FILE, "r", encoding="utf-8") as f:
            text = f.read()
        if not text:
            bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
            return
        for i in range(0, len(text), 4096):
            bot.send_message(message.chat.id, text[i:i+4096])
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
